{"pageProps":{"post":{"id":1,"title":"Optional Chaining In JS Will Save Your Nerves","slug":"optional-chaining","summary":"What Is Optional Chaining And How Its Would Help You To Write Better Code","photo":"/images/optional-chaining.jpg","read_duration":10,"created_at":"2021-09-13","published_at":"2021-09-14","content":"Most of you had much problem before with objects validation like this:  \n\n`if (obj.avatar && obj.avatar.small && obj.avatar.small.url) {}`  \n\nin old way you should write so dirty and long conditions to validate object.  \n\nQuestion is how we can solve it?  \n\nAnswer is **Optional Chaining**. \nOptional Chaining is one of the best Javascript features released in ES2020. mission of this features is solve long and dirty object conditions.  \n\nlets take a look how it works:\nWithout Optional Chaining:  \n\n`if (obj.avatar && obj.avatar.small && obj.avatar.small.url) {}` \n\n \nWith Optional Chaining:  \n\n`if (obj?.avatar?.small?.url) {}`  \n\nwith Optional Chaining we only wrote one condition instead of three diffrent conditions.\nwhen you put `?` sign after property name and before `.` actually you say if the proptery is doesn't exist break the condition by throwing `undefined`.  \n\nLook at this example:  \n\n`let obj = {  \n  avatar: null  \n}`  \n\n`console.log(obj.avatar.small.url) // TypeError: Cannot read properties of undefined`\n\n`console.log(obj.avatar?.small?.url) // undefined`\n\nin summary Optional Chaining checks every property and if that is `null` or `undefined` will break and throws undefined."},"recentPosts":[{"id":1,"title":"Optional Chaining In JS Will Save Your Nerves","slug":"optional-chaining","summary":"What Is Optional Chaining And How Its Would Help You To Write Better Code","photo":"/images/optional-chaining.jpg","read_duration":10,"created_at":"2021-09-13","published_at":"2021-09-14"}]},"__N_SSG":true}